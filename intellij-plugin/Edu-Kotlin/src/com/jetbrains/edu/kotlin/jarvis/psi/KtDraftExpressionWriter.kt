package com.jetbrains.edu.kotlin.jarvis.psi

import com.intellij.openapi.command.WriteCommandAction
import com.intellij.openapi.project.Project
import com.intellij.psi.PsiDocumentManager
import com.intellij.psi.PsiElement
import com.jetbrains.edu.learning.jarvis.DraftExpressionWriter
import org.jetbrains.kotlin.psi.KtPsiFactory

class KtDraftExpressionWriter : DraftExpressionWriter {
  private val wrapWithDraftBlock: (String) -> String = { code ->
    """
        draft {
            // This code will be generated by the command you promoted
            // Please, fix the highlighted issues to complete the task if any
            // If you would like to accept the changes, click on the bulb icon
            
            $code
            }
    """.trimIndent()
  }

  override fun addDraftExpression(project: Project, element: PsiElement, generatedCode: String) {
    val draftExpression = KtPsiFactory(project).createExpressionCodeFragment(wrapWithDraftBlock(generatedCode), null)
    val newLine = KtPsiFactory(project).createNewLine()
    WriteCommandAction.runWriteCommandAction(project, null, null, {
      PsiDocumentManager.getInstance(project).commitAllDocuments()
      element.addAfter(draftExpression, element)
      element.addAfter(newLine, element)
    })
  }
}
