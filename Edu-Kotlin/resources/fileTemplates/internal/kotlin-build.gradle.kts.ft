import java.io.ByteArrayOutputStream
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
  java
  application
  kotlin("jvm") version "${KOTLIN_VERSION}" apply false
}

buildscript {
  extra["kotlin_version"] = "${KOTLIN_VERSION}"

  repositories {
    mavenCentral()
  }

  dependencies {
    classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${KOTLIN_VERSION}")
  }
}

fun printOutput(output: Any): Task {
  return tasks.create("printOutput") {
    println("#educational_plugin_checker_version 1")
    val separator = System.lineSeparator()
    val lines = output.toString().split("(?<=${separator})|(?=${separator})")
    for (line in lines) {
      println("#educational_plugin$line")
    }
  }
}

subprojects {
  apply {
    plugin("application")
    plugin("java")
    plugin("kotlin")
  }

  java.sourceCompatibility = JavaVersion.VERSION_1_8

  repositories {
    mavenCentral()
  }

  dependencies {
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${KOTLIN_VERSION}")
    implementation("org.jetbrains.kotlin:kotlin-gradle-plugin:${KOTLIN_VERSION}")
    testImplementation(group = "junit", name = "junit", version = "4.12")
    testRuntimeOnly("org.junit.vintage:junit-vintage-engine:5.9.2")
  }

  tasks {
    withType<JavaCompile> {
      sourceCompatibility = "1.8"
      targetCompatibility = "1.8"
    }
    withType<KotlinCompile> {
      kotlinOptions.jvmTarget = "1.8"
    }
  }

  sourceSets.main {
    java.srcDir("src")
  }

  sourceSets.test {
    java.srcDir("test")
  }

  application {
    mainClass.set(project.properties["mainClass"]?.toString() ?: "")
  }

  tasks {
    withType<Test> {
      useJUnitPlatform()

      outputs.upToDateWhen { false }

      addTestListener(object : TestListener {
        override fun beforeSuite(suite: TestDescriptor) {}
        override fun beforeTest(testDescriptor: TestDescriptor) {}
        override fun afterTest(testDescriptor: TestDescriptor, result: TestResult) {
          if (result.resultType == TestResult.ResultType.FAILURE) {
            val message = result.exception?.message ?: "Wrong answer"
            val lines = message.split("\n")
            println("#educational_plugin FAILED + ${lines[0]}")
            lines.subList(1, lines.size).forEach { line ->
              println("#educational_plugin$line")
            }
            // we need this to separate output of different tests
            println()
          }
        }

        override fun afterSuite(suite: TestDescriptor, result: TestResult) {}
      })
    }
  }

  if (project.properties["educationalRun"]?.toString().equals("true", ignoreCase = true)) {
    val runOutput = ByteArrayOutputStream()
    tasks.run.get().standardOutput = runOutput
    tasks.run.get().doLast { printOutput(runOutput) }
  }
}

project(":util") {
  dependencies {
    implementation(group = "junit", name = "junit", version = "4.12")
  }
}

configure(subprojects.filter { it.name != "util" }) {
  dependencies {
    implementation(project(":util").dependencyProject.sourceSets["main"].output)
    testImplementation(project(":util").dependencyProject.sourceSets["test"].output)
  }
}
